- name: disable nginx upstream
  replace:
    path: "/application/nginx/conf/conf.d/upstream/web_api_upstream.conf"
    regexp: '(server.*{{ ansible_eth0.ipv4.address }})'
    replace: '#\1'
  delegate_to: "{{ item }}"
  when: ansible_hostname is search("web-api")
  loop:
    - lb-A1
    - lb-B1
  notify: reload nginx

- meta: flush_handlers

- name: register pkgname
  shell: echo "`date +%F-%H-%M`_{{ pkgname }}"
  register: backup_pkgname

- name: copy "{{ pkgname }}"
  copy:
    src: "{{ pkgname }}"
    dest: /tmp/
    mode: 0640

- name: remove project
  shell: "cd {{ pkgroot }} && rm -rf *"

- name: unarchive pkg
  unarchive:
    src: "/tmp/{{ pkgname }}"
    dest: "{{ pkgroot }}"
    remote_src: yes

- name: backup /tmp/pkg
  copy:
    remote_src: yes
    src: /tmp/{{ pkgname }}
    dest: /opt/{{ backup_pkgname.stdout }}
    mode: 0640

- name: remove backup
  shell: "cd /opt/ && ls -r *{{ pkgname }} | awk 'NR>10' |xargs rm -f"

- name: start rngd
  service: name=rngd state=started enabled=yes

- name: restart main.sh
  shell: ". /etc/profile && /bin/bash /application/jar/{{ project }}/bin/main.sh restart"
  when: ansible_hostname is search("inner-api")

- name: restart tomcatd
  shell: ". /etc/profile && nohup /etc/init.d/tomcatd restart"
  when: ansible_hostname is search("web-api|web-manager|job")

- name: waiting web running...
  pause: seconds=15
  when: ansible_hostname is search("web-api")

- name: wait for web to start
  wait_for: port={{ web_port }} state=started delay=2 timeout=10

- name: enable nginx upstream
  replace:
    path: "/application/nginx/conf/conf.d/upstream/web_api_upstream.conf"
    regexp: '#(server.*{{ ansible_eth0.ipv4.address }}.*)'
    replace: '\1'
  delegate_to: "{{ item }}"
  when: ansible_hostname is search("web-api")
  loop:
    - lb-A1
    - lb-B1
  notify: reload nginx
